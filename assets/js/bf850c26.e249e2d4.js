"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[958],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="Command",s={unversionedId:"building-blocks/command",id:"building-blocks/command",title:"Command",description:"Commands are the only actions that may modify the state of a store. They are exposed via functions set, update, and mutate to perform state modifications. All of those are based on the native signal modification functions.",source:"@site/docs/building-blocks/command.md",sourceDirName:"building-blocks",slug:"/building-blocks/command",permalink:"/signalstory/docs/building-blocks/command",draft:!1,editUrl:"https://github.com/zuriscript/signalstory/tree/master/docs/docs/building-blocks/command.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/signalstory/docs/building-blocks/query"},next:{title:"Effect",permalink:"/signalstory/docs/building-blocks/effect"}},l={},c=[{value:"<code>Set</code>",id:"set",level:2},{value:"<code>Update</code>",id:"update",level:2},{value:"<code>Mutate</code>",id:"mutate",level:2}],d={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"command"},"Command"),(0,r.kt)("p",null,"Commands are the only actions that may modify the state of a store. They are exposed via functions ",(0,r.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," to perform state modifications. All of those are based on the ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/guide/signals#writable-signals"},"native signal modification functions"),"."),(0,r.kt)("p",null,"All modification methods take an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"commandName")," parameter, which is used for logging and history utilities."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Although, the consumer can use ",(0,r.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," directly and even pass a decorative command name as argument, it is recommendet to expose store class methods that encapsulate the modification logic, as this follows a well structured and discoverable ",(0,r.kt)("inlineCode",{parentName:"p"},"repository")," approach and consolidates modification in a more controlled fashion.")),(0,r.kt)("h2",{id:"set"},(0,r.kt)("inlineCode",{parentName:"h2"},"Set")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," method is used to set the store's state to the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"newState"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"set(newState: TState, commandName?: string): void")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"@Injectable({ providedIn: 'root' })\nexport class CounterStore extends Store<{ count: number }> {\n  constructor() {\n    super({ initialState: { count: 0 } });\n  }\n\n  increment() {\n    this.set({ count: this.state().count + 1 }, 'Increment');\n  }\n}\n")),(0,r.kt)("h2",{id:"update"},(0,r.kt)("inlineCode",{parentName:"h2"},"Update")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," method is used to update the store's state based on the current state. It takes an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateFn")," function that receives the current state as a parameter and returns the updated state."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"update(updateFn: (currentState: TState) => TState, commandName?: string): void")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"increment() {\n    this.update(state => ({ count: state.count + 1 }), 'Increment');\n}\n")),(0,r.kt)("h2",{id:"mutate"},(0,r.kt)("inlineCode",{parentName:"h2"},"Mutate")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," method is used to directly mutate the store's state using the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"mutator")," function. The ",(0,r.kt)("inlineCode",{parentName:"p"},"mutator")," function receives the current state as a parameter and performs in-place mutations on it."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mutate(mutator: (currentState: TState) => void, commandName?: string): void")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"increment() {\n    this.mutate(state => {\n        state.count++;\n    }, 'Increment');\n}\n")))}m.isMDXComponent=!0}}]);