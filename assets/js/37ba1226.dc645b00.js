"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[784],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},665:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3},s="Store",i={unversionedId:"store",id:"store",title:"Store",description:"Stores serve as a central hub for managing a specific slice of the application's state. A store may be used globally but can also be scoped at a component or service level. Rather than using a single store for the entire application, the state can be distributed across multiple isolated stores. Each store could be responsible for managing state related to a specific domain entity or a feature.",source:"@site/docs/store.md",sourceDirName:".",slug:"/store",permalink:"/signalstory/docs/store",draft:!1,editUrl:"https://github.com/zuriscript/signalstory/tree/master/docs/docs/store.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/signalstory/docs/installation"},next:{title:"Configuration",permalink:"/signalstory/docs/configuration"}},c={},l=[{value:"Create an Injectable Store",id:"create-an-injectable-store",level:2},{value:"Create a Dynamic Store",id:"create-a-dynamic-store",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"store"},"Store"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Stores")," serve as a central hub for managing a specific slice of the application's state. A store may be used globally but can also be scoped at a component or service level. Rather than using a single store for the entire application, the state can be distributed across multiple isolated stores. Each store could be responsible for managing state related to a specific domain entity or a feature."),(0,a.kt)("h2",{id:"create-an-injectable-store"},"Create an Injectable Store"),(0,a.kt)("p",null,"signalstory stores can be defined as injectable concrete classes extending the generic ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," class, that can be injected into Angular components, services, and other classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface UserData {\n  name: string;\n  birthday: Date;\n}\n\nexport interface UserUI {\n  isSelected: boolean;\n}\n\nexport type UserState = (UserData & UserUI)[];\n\n@Injectable({ providedIn: 'root' })\nexport class UserStore extends Store<UserState> {\n  constructor() {\n    super({ initialState: [] });\n  }\n}\n")),(0,a.kt)("h2",{id:"create-a-dynamic-store"},"Create a Dynamic Store"),(0,a.kt)("p",null,"signalstory also provides the flexibility to create generic store instances dynamically at runtime, which may be useful for certain scenarios."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const counterStore = new Store<number>({ initialState: 5 });\ncounterStore.update(state => state++, 'Increment');\nconsole.log(counterStore.state());\n")))}d.isMDXComponent=!0}}]);