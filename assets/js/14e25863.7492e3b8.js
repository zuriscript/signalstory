"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[895],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=o.createContext({}),s=function(e){var t=o.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(g.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,d=c["".concat(g,".").concat(m)]||c[m]||p[m]||i;return n?o.createElement(d,a(a({ref:t},u),{},{components:n})):o.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var g in t)hasOwnProperty.call(t,g)&&(l[g]=t[g]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:7},a="Logger",l={unversionedId:"plugins/logger",id:"plugins/logger",title:"Logger",description:"Use the Logger plugin for the logging of crucial events related to the state management of your store. By enabling the LoggerPlugin, you can gain insights into store initialization, command execution, and effect execution.",source:"@site/docs/plugins/logger.md",sourceDirName:"plugins",slug:"/plugins/logger",permalink:"/signalstory/docs/plugins/logger",draft:!1,editUrl:"https://github.com/zuriscript/signalstory/tree/master/docs/docs/plugins/logger.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"DevTools",permalink:"/signalstory/docs/plugins/devtools"},next:{title:"Custom",permalink:"/signalstory/docs/plugins/custom-plugin"}},g={},s=[{value:"Enabling Logging",id:"enabling-logging",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Logging Events",id:"logging-events",level:2},{value:"Custom Log Function",id:"custom-log-function",level:2}],u={toc:s},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"logger"},"Logger"),(0,r.kt)("p",null,"Use the Logger plugin for the logging of crucial events related to the state management of your store. By enabling the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoggerPlugin"),", you can gain insights into store initialization, command execution, and effect execution."),(0,r.kt)("h2",{id:"enabling-logging"},"Enabling Logging"),(0,r.kt)("p",null,"To activate the logger feature in signalstory, include the plugin using the exposed ",(0,r.kt)("inlineCode",{parentName:"p"},"useLogger")," factory method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class StoreWithLogger extends Store<MyState> {\n  constructor() {\n    super({\n    initialState: { ... },\n    name: 'My Store with Logger',\n    plugins: [\n      useLogger()\n    ],\n    });\n  }\n}\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useLogger")," function accepts an optional configuration object, allowing you to customize the logger behavior. The available option is:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"Log function for commands and effects."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"console.log"))))),(0,r.kt)("h2",{id:"logging-events"},"Logging Events"),(0,r.kt)("p",null,"Once the logger is enabled, it logs events at different stages of the store lifecycle:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"init"),": Logs store initialization, including the initial state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postprocessCommand"),": Logs the execution of commands."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preprocessEffect"),": Logs the start of effect execution."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postprocessEffect"),": Logs the completion of effect execution.")),(0,r.kt)("p",null,"Example of logged events:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[My Store with Logger->Init] { ...initialState }\n[My Store with Logger->Command] CommandName { ...currentState }\n[My Store with Logger->Effect STARTED] EffectName { ...currentState }\n[My Store with Logger->Effect FINISHED in 342 ms] EffectName { ...currentState }\n")),(0,r.kt)("p",null,"Adjust the log content and format by providing a custom log function."),(0,r.kt)("h2",{id:"custom-log-function"},"Custom Log Function"),(0,r.kt)("p",null,"You can provide a custom log function to ",(0,r.kt)("inlineCode",{parentName:"p"},"useLogger")," for more advanced logging. The log function should have the signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Logger = (message?: unknown, ...optionalParams: unknown[]) => void;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const customLoggerFunction: Logger = (message, ...optionalParams) => {\n  // Your custom logging logic here\n};\n\n// Use it\nuseLogger({\n  logFunction: customLoggerFunction,\n});\n")))}p.isMDXComponent=!0}}]);