"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},a="Query",s={unversionedId:"building-blocks/query",id:"building-blocks/query",title:"Query",description:"Queries are used to retrieve data from the store's state. They represent read-only operations that fetch specific information from the state and make it available for consumption in other parts of the application.",source:"@site/docs/building-blocks/query.md",sourceDirName:"building-blocks",slug:"/building-blocks/query",permalink:"/signalstory/docs/building-blocks/query",draft:!1,editUrl:"https://github.com/zuriscript/signalstory/tree/master/docs/docs/building-blocks/query.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Building Blocks",permalink:"/signalstory/docs/category/building-blocks"},next:{title:"Command",permalink:"/signalstory/docs/building-blocks/command"}},u={},l=[{value:"Store Queries",id:"store-queries",level:2},{value:"Queries Targeting Multiple Stores",id:"queries-targeting-multiple-stores",level:2},{value:"Injecting Other Stores Inside the Store (Discouraged)",id:"injecting-other-stores-inside-the-store-discouraged",level:3},{value:"Writing multi store queries in the Component or Service",id:"writing-multi-store-queries-in-the-component-or-service",level:3},{value:"Using a query object",id:"using-a-query-object",level:3}],c={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"query"},"Query"),(0,o.kt)("p",null,"Queries are used to retrieve data from the store's state. They represent read-only operations that fetch specific information from the state and make it available for consumption in other parts of the application."),(0,o.kt)("p",null,"Since ",(0,o.kt)("inlineCode",{parentName:"p"},"signalstory")," uses ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/signals#computed-signals"},"signals")," as native state implementation, queries based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"computed")," function are both ",(0,o.kt)("strong",{parentName:"p"},"lazily evaluated and memoized"),"."),(0,o.kt)("h2",{id:"store-queries"},"Store Queries"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"state()")," getter to access the entire state of the store. To select a slice or to apply transformations use angulars ",(0,o.kt)("inlineCode",{parentName:"p"},"computed")," function. To define a query, you can create a function within your store that encapsulates the logic for accessing the desired data from the state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { computed } from '@angular/core';\nimport { Store } from 'signalstory';\n\nclass CounterStore extends Store<number> {\n  constructor() {\n    super({ initialState: 0 });\n  }\n\n  // highlight-start\n  // Use getter methods for parameterless queries to simplify call syntax\n  public get plus100() {\n    return computed(() => this.state() + 100);\n  }\n  // highlight-end\n\n  // highlight-start\n  public plusN(n: number) {\n    return computed(() => this.state() + n);\n  }\n  // highlight-end\n}\n\nconst counterStore = new CounterStore();\n\nconsole.log(counterStore.state()); // prints 0\nconsole.log(counterStore.plus100()); // prints 100\nconsole.log(counterStore.plusN(200)()); // prints 300\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"plus100")," signal depends on the state. Whenever the state updates, anything, which depends on either ",(0,o.kt)("inlineCode",{parentName:"p"},"plus100")," or state, will be notified of the update as well."),(0,o.kt)("h2",{id:"queries-targeting-multiple-stores"},"Queries Targeting Multiple Stores"),(0,o.kt)("p",null,"In some cases, you may need to retrieve or combine data from multiple stores to fulfill a specific requirement. There are multiple ways to approach multi store queries."),(0,o.kt)("h3",{id:"injecting-other-stores-inside-the-store-discouraged"},"Injecting Other Stores Inside the Store (Discouraged)"),(0,o.kt)("p",null,"One approach is to inject the other stores inside one aggregating store and implement a query that combines the state of of all dependent stores. This approach allows the main store to directly access the state of other stores and derive the required data."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This approach is discouraged, as this couples the store to other entities, which makes it harder to test and reason about. Further, it introduces dependecies which have to be managed.")),(0,o.kt)("h3",{id:"writing-multi-store-queries-in-the-component-or-service"},"Writing multi store queries in the Component or Service"),(0,o.kt)("p",null,"We can leave it to the consumer, i.e. a component or a service where the data is required, to target multiple stores explicitly. This approach allows you to retrieve data from multiple stores without modifying the individual stores themselves. Using this approach, you can not share the query with other consumers."),(0,o.kt)("h3",{id:"using-a-query-object"},"Using a query object"),(0,o.kt)("p",null,"You can use the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"createQuery")," function to create a query object, which can be passed to any store that has been initialized with an injector context (",(0,o.kt)("inlineCode",{parentName:"p"},"enableEffectsAndQueries"),"). A query object consist of an array of stores involved in the query and a function taking those stores as argument. Note, that you may not use the ",(0,o.kt)("inlineCode",{parentName:"p"},"computed")," function in query objects, as this is done for you by the stores implementation."),(0,o.kt)("p",null,"It actually doesn't matter which store runs the query object. It can be any store that has ",(0,o.kt)("inlineCode",{parentName:"p"},"enableEffectsAndQueries")," enabled. The other stores are not required to have this setting enabled."),(0,o.kt)("p",null,"The benefit of using this approach is, that we now have an independent query which can be declared and exported centrally and be reused anywhere."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Injectable } from '@angular/core';\nimport { Store, createQuery } from 'signalstory';\n\n@Injectable({ providedIn: 'root' })\nclass CounterStore extends Store<number> {\n  constructor() {\n    super({ initialState: 7, enableEffectsAndQueries: true });\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nclass WordStore extends Store<string> {\n  constructor() {\n    super({ initialState: 'Magnificent' });\n  }\n}\n\n// highlight-start\nconst counterAndWordQuery = createQuery(\n  [CounterStore, WordStore],\n  (counter, word) => word.state() + counter.state()\n);\n// highlight-end\n\n// highlight-start\nexport const counterAndWordWithParamQuery = createQuery(\n  [CounterStore, WordStore],\n  (counter, word, suffix: string) => word.state() + counter.state() + suffix\n);\n// highlight-end\n\n// Any Component or service:\n\n@Component({\n  selector: 'app-root',\n  template: '',\n  styles: [],\n})\nexport class AppComponent {\n  constructor(counterStore: CounterStore) {\n    // highlight-start\n    console.log(counterStore.runQuery(counterAndWordQuery)); // prints Magnificent7\n    console.log(counterStore.runQuery(counterAndWordWithParamQuery, '-movie')); // prints Magnificent7-movie\n    // highlight-end\n  }\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Read about ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/signals#computed-signals"},"computed signals")," in the official docs to unlock the full power of multi store queries. You may even specify to use the state value of a certain store without tracking, hence, a change of that stores value would ",(0,o.kt)("strong",{parentName:"p"},"not")," force the computed query to be reevaluated. ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/signals#reading-without-tracking-dependencies"},"Read more"))))}d.isMDXComponent=!0}}]);