"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},s="Store",i={unversionedId:"store",id:"store",title:"Store",description:"Stores serve as a central hub for managing a specific slice of the application's state. A store may be used globally but can also be scoped at a component or service level. Rather than using a single store for the entire application, the state can be distributed across multiple isolated stores. Each store could be responsible for managing state related to a specific domain entity or a feature.",source:"@site/docs/store.md",sourceDirName:".",slug:"/store",permalink:"/signalstory/docs/store",draft:!1,editUrl:"https://github.com/zuriscript/signalstory/tree/master/docs/docs/store.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/signalstory/docs/installation"},next:{title:"Configuration",permalink:"/signalstory/docs/configuration"}},l={},c=[{value:"Create an Injectable Store Service",id:"create-an-injectable-store-service",level:2},{value:"Create a Dynamic Store",id:"create-a-dynamic-store",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"store"},"Store"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Stores")," serve as a central hub for managing a specific slice of the application's state. A store may be used globally but can also be scoped at a component or service level. Rather than using a single store for the entire application, the state can be distributed across multiple isolated stores. Each store could be responsible for managing state related to a specific domain entity or a feature."),(0,a.kt)("p",null,"A store encapsulates a ",(0,a.kt)("inlineCode",{parentName:"p"},"WritableSignal")," as state. It exposes the functions ",(0,a.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"update"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"mutate")," for performing state modifications, as well as the ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," as readonly signal. While Signalstory offers a variety of features for your everyday needs, it goes beyond that by introducing concepts and abstractions to help you build a maintainable and scalable architecture. Some of these abstractions include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/signalstory/docs/building-blocks/command"},"Command"),": A structured approach to exposing state-modifying methods."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/signalstory/docs/building-blocks/query"},"Query"),": Patterns and utilities facilitating testable multi-store queries."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/signalstory/docs/building-blocks/effect"},"Effect Objects"),": Encapsulation of side effects and action flows into maintainable and testable standalone objects with a single purpose. Use meta attributes to control addtional behaviors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/signalstory/docs/building-blocks/event"},"Events"),": Synchronous propagation of events across stores.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Please note that these abstractions and features are entirely optional and not mandatory for signalstory to function. Feel free to cherry-pick the functionalities that suit your needs!")),(0,a.kt)("h2",{id:"create-an-injectable-store-service"},"Create an Injectable Store Service"),(0,a.kt)("p",null,"Stores can be defined as injectable concrete classes extending the generic ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," class, that can be injected into Angular components, services, and other classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface UserData {\n  name: string;\n  birthday: Date;\n}\n\nexport interface UserUI {\n  isSelected: boolean;\n}\n\nexport type UserState = (UserData & UserUI)[];\n\n@Injectable({ providedIn: 'root' })\nexport class UserStore extends Store<UserState> {\n  constructor() {\n    super({ initialState: [] });\n  }\n\n  // Expose functions to modify the state\n  public selectUser(name: string): void {\n    this.mutate(state => {\n      const userToSelect = state.find(user => user.name === name);\n      if (userToSelect) {\n        userToSelect.isSelected = true;\n      }\n    });\n  }\n\n  // Expose functions to query the state\n  public get selectedUsers(): Signal<UserState> {\n    return computed(() => this.state().filter(user => user.isSelected));\n  }\n}\n")),(0,a.kt)("h2",{id:"create-a-dynamic-store"},"Create a Dynamic Store"),(0,a.kt)("p",null,"signalstory also provides the flexibility to create generic store instances dynamically at runtime, which may be useful for certain scenarios."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const counterStore = new Store<number>({ initialState: 5 });\ncounterStore.update(state => state++, 'Increment');\nconsole.log(counterStore.state());\n")))}d.isMDXComponent=!0}}]);